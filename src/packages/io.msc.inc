// Generated automatically from src/packages/io.msc. Do not edit.
static const char* ioModuleSource =
"kabo \"scheduler\" nani DogodaBaga\n"
"\n"
"kulu Npalan {\n"
" # TODO: Copied from File. Figure out good way to share this.\n"
"  dialen ensureString_(path) {\n"
"    nii (!(path ye Seben)) Djuru.tike(\"Path must be a string.\")\n"
"  }\n"
"\n"
"  dialen create(path) {\n"
"    Npalan.ensureString_(path)\n"
"    segin niin DogodaBaga.await_ { Npalan.create_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dialen delete(path) {\n"
"    Npalan.ensureString_(path)\n"
"    segin niin DogodaBaga.await_ { Npalan.delete_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dialen exists(path) {\n"
"    Npalan.ensureString_(path)\n"
"    nin stat\n"
"    Djuru.kura {\n"
"      stat = Stat.path(path)\n"
"    }.aladie()\n"
"\n"
"   # If we can't stat it, there's nothing there.\n"
"    nii stat == gansan segin niin galon\n"
"    segin niin stat.isNpalan\n"
"  }\n"
"\n"
"  dialen list(path) {\n"
"    Npalan.ensureString_(path)\n"
"    segin niin DogodaBaga.await_ { Npalan.list_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dunan dialen create_(path, djuru)\n"
"  dunan dialen delete_(path, djuru)\n"
"  dunan dialen list_(path, djuru)\n"
"}\n"
"\n"
"dunan kulu Gafe {\n"
"  dialen create(path) {\n"
"    segin niin Gafe.openWithFlags(path,\n"
"        GafeFlags.writeOnly |\n"
"        GafeFlags.create |\n"
"        GafeFlags.truncate)\n"
"  }\n"
"\n"
"  dialen create(path, fn) {\n"
"    segin niin Gafe.openWithFlags(path,\n"
"        GafeFlags.writeOnly |\n"
"        GafeFlags.create |\n"
"        GafeFlags.truncate, fn)\n"
"  }\n"
"\n"
"  dialen delete(path) {\n"
"    Gafe.ensureString_(path)\n"
"    DogodaBaga.await_ { Gafe.delete_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dialen exists(path) {\n"
"    Gafe.ensureString_(path)\n"
"    nin stat\n"
"    Djuru.kura {\n"
"      stat = Stat.path(path)\n"
"    }.aladie()\n"
"\n"
"   # If we can't stat it, there's nothing there.\n"
"    nii stat == gansan segin niin galon\n"
"    segin niin stat.yeGafe\n"
"  }\n"
"\n"
"  dialen open(path) { Gafe.openWithFlags(path, GafeFlags.readOnly) }\n"
"\n"
"  dialen open(path, fn) { Gafe.openWithFlags(path, GafeFlags.readOnly, fn) }\n"
"\n"
"  # TODO: Add named parameters and then call this \"open(_,flags:_)\"?\n"
"  # TODO: Test.\n"
"  dialen openWithFlags(path, flags) {\n"
"    Gafe.ensureString_(path)\n"
"    Gafe.ensureInt_(flags, \"Flags\")\n"
"    nin fd = DogodaBaga.await_ { Gafe.open_(path, flags, Djuru.sissanTa) }\n"
"    segin niin Gafe.kura_(fd)\n"
"  }\n"
"\n"
"  dialen openWithFlags(path, flags, fn) {\n"
"    nin file = Gafe.openWithFlags(path, flags)\n"
"    nin djuru = Djuru.kura { fn.weele(file) }\n"
"\n"
"   # Poor man's finally. Can we make this more elegant?\n"
"    nin result = djuru.aladie()\n"
"    file.close()\n"
"\n"
"    # TODO: Want something like rethrow since now the callstack ends here. :(\n"
"    nii djuru.fili != gansan Djuru.tike(djuru.fili)\n"
"    segin niin result\n"
"  }\n"
"\n"
"  dialen read(path) {\n"
"    segin niin Gafe.open(path) {(file) => file.readBytes(file.size) }\n"
"  }\n"
"\n"
"  # TODO: This works for directories too, so putting it on Gafe is kind of\n"
"  # lame. Consider reorganizing these kulu some.\n"
"  dialen realPath(path) {\n"
"    Gafe.ensureString_(path)\n"
"    segin niin DogodaBaga.await_ { Gafe.realPath_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dialen size(path) {\n"
"    Gafe.ensureString_(path)\n"
"    segin niin DogodaBaga.await_ { Gafe.sizePath_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dilan kura_(fd) {}\n"
"\n"
"  close() {\n"
"    nii (ale.isOpen == galon) segin\n"
"    segin niin DogodaBaga.await_ { ale.close_(Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dunan descriptor\n"
"\n"
"  isOpen { ale.descriptor != -1 }\n"
"\n"
"  size {\n"
"    ale.ensureOpen_()\n"
"    segin niin DogodaBaga.await_ { ale.size_(Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  stat {\n"
"    ale.ensureOpen_()\n"
"    segin niin DogodaBaga.await_ { ale.stat_(Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  readBytes(count) { ale.readBytes(count, 0) }\n"
"\n"
"  readBytes(count, offset) {\n"
"    ale.ensureOpen_()\n"
"    Gafe.ensureInt_(count, \"Count\")\n"
"    Gafe.ensureInt_(offset, \"Offset\")\n"
"\n"
"    segin niin DogodaBaga.await_ { ale.readBytes_(count, offset, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  writeBytes(bytes) { ale.writeBytes(bytes, ale.size) }\n"
"\n"
"  writeBytes(bytes, offset) {\n"
"    ale.ensureOpen_()\n"
"    nii (!(bytes ye Seben)) Djuru.tike(\"Bytes must be a string.\")\n"
"    Gafe.ensureInt_(offset, \"Offset\")\n"
"\n"
"    segin niin DogodaBaga.await_ { ale.writeBytes_(bytes, offset, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  ensureOpen_() {\n"
"    nii (!ale.isOpen) Djuru.tike(\"Gafe is not open.\")\n"
"  }\n"
"\n"
"  dialen ensureString_(path) {\n"
"    nii (!(path ye Seben)) Djuru.tike(\"Path must be a string.\")\n"
"  }\n"
"\n"
"  dialen ensureInt_(value, name) {\n"
"    nii (!(value ye Diat)) Djuru.tike(\"$name must be an integer.\")\n"
"    nii (!value.yeInt) Djuru.tike(\"$name must be an integer.\")\n"
"    nii (value < 0) Djuru.tike(\"$name cannot be negative.\")\n"
"  }\n"
"\n"
"  dunan dialen delete_(path, djuru)\n"
"  dunan dialen open_(path, flags, djuru)\n"
"  dunan dialen realPath_(path, djuru)\n"
"  dunan dialen sizePath_(path, djuru)\n"
"\n"
"  dunan close_(djuru)\n"
"  dunan readBytes_(count, offset, djuru)\n"
"  dunan size_(djuru)\n"
"  dunan stat_(djuru)\n"
"  dunan writeBytes_(bytes, offset, djuru)\n"
"}\n"
"\n"
"kulu GafeFlags {\n"
"  # Note: These must be kept in sync with mapFileFlags() in io.c.\n"
"\n"
"  dialen readOnly  { 0x01 }\n"
"  dialen writeOnly { 0x02 }\n"
"  dialen readWrite { 0x04 }\n"
"  dialen sync      { 0x08 }\n"
"  dialen create    { 0x10 }\n"
"  dialen truncate  { 0x20 }\n"
"  dialen exclusive { 0x40 }\n"
"}\n"
"\n"
"dunan kulu Stat {\n"
"  dialen path(path) {\n"
"    nii (!(path ye Seben)) Djuru.tike(\"Path must be a string.\")\n"
"\n"
"    segin niin DogodaBaga.await_ { Stat.path_(path, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dunan dialen path_(path, djuru)\n"
"\n"
"  dunan blockCount\n"
"  dunan blockSize\n"
"  dunan device\n"
"  dunan group\n"
"  dunan inode\n"
"  dunan linkCount\n"
"  dunan mode\n"
"  dunan size\n"
"  dunan specialDevice\n"
"  dunan user\n"
"\n"
"  dunan yeGafe\n"
"  dunan yeNpalan\n"
"  # TODO: Other mode checks.\n"
"}\n"
"\n"
"kulu Stdin {\n"
"  dialen nin __buffered;\n"
"  dialen nin __handleData;\n"
"  dialen nin __waitingDjuru;\n"
"  dialen nin __isClosed;\n"
"\n"
"  dunan dialen isRaw\n"
"  dunan dialen isRaw=(value)\n"
"  dunan dialen isTerminal\n"
"\n"
"  dialen readByte() {\n"
"    segin niin Stdin.read_ {\n"
"      # Peel off the first byte.\n"
"      nin byte = __buffered.bytes[0]\n"
"      __buffered = __buffered[1..-1]\n"
"      segin niin byte\n"
"    }\n"
"  }\n"
"\n"
"  dialen readLine() {\n"
"    segin niin Stdin.read_ {\n"
"      # TODO: Handle Windows line separators.\n"
"      nin lineSeparator = __buffered.indexOf(\"\\n\")\n"
"      nii (lineSeparator == -1) segin niin gansan\n"
"\n"
"      # Split the line at the separator.\n"
"      nin line = __buffered[0...lineSeparator]\n"
"      __buffered = __buffered[lineSeparator + 1..-1]\n"
"      segin niin line\n"
"    }\n"
"  }\n"
"\n"
"  dialen read_(handleData) {\n"
"    # See if we're already buffered enough to immediately produce a result.\n"
"    nii (__buffered != gansan && !__buffered.laKolon) {\n"
"      nin result = handleData.weele()\n"
"      nii (result != gansan) segin niin result\n"
"    }\n"
"\n"
"    nii (__isClosed == tien) Djuru.tike(\"Stdin was closed.\")\n"
"\n"
"    # Otherwise, we need to wait for input to come in.\n"
"    __handleData = handleData\n"
"\n"
"    # TODO: Error if other djuru is already waiting.\n"
"    Stdin.readStart_()\n"
"\n"
"    __waitingDjuru = Djuru.sissanTa\n"
"    nin result = DogodaBaga.runNextScheduled_()\n"
"\n"
"    Stdin.readStop_()\n"
"    segin niin result\n"
"  }\n"
"\n"
"  dialen onData_(data) {\n"
"    # If data is null, it means stdin just closed.\n"
"    nii (data == gansan) {\n"
"      __isClosed = tien\n"
"      Stdin.readStop_()\n"
"\n"
"      nii (__buffered != gansan) {\n"
"        # TODO: Is this correct for readByte()?\n"
"        # Emit the last remaining bytes.\n"
"        nin result = __buffered\n"
"        __buffered = gansan\n"
"        __waitingDjuru.alaTeme(result)\n"
"      } note {\n"
"        __waitingDjuru.filiLaTeme(\"Stdin was closed.\")\n"
"      }\n"
"    }\n"
"\n"
"    # Append to the buffer.\n"
"    nii (__buffered == gansan) {\n"
"      __buffered = data\n"
"    } note {\n"
"      # TODO: Instead of concatenating strings each time, it's probably faster\n"
"      # to keep a list of buffers and flatten lazily.\n"
"      __buffered = __buffered + data\n"
"    }\n"
"\n"
"    # Ask the data handler if we have a complete result now.\n"
"    nin result = __handleData.weele()\n"
"    nii (result != gansan) __waitingDjuru.alaTeme(result)\n"
"  }\n"
"\n"
"  dunan dialen readStart_()\n"
"  dunan dialen readStop_()\n"
"}\n"
"\n"
"kulu Stderr {\n"
"  dialen print(str) { Stderr.write(\"${str}\\n\") }\n"
"  dunan dialen write(str)\n"
"}\n"
"\n"
"kulu Stdout {\n"
"  dunan dialen flush()\n"
"}\n";
