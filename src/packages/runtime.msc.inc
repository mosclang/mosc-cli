// Generated automatically from src/packages/runtime.msc. Do not edit.
static const char* runtimeModuleSource =
"\n"
"kulu Runtime {\n"
"  dialen NAME { \"mosc\" }\n"
"  dialen MOSC_VERSION { \"0.8.0\" }\n"
"  dialen VERSION { \"0.4.0\" }\n"
"  ## allows simple numeric comparison of semantic version strings\n"
"  ## by turning them into large integers\n"
"  dialen versionToNumber_(v) {\n"
"    nin segments = v.faraFara(\".\").yelema { (x) => Diat.kaboSebenna(x) }.walanNa\n"
"    segin niin segments[0] * 1000000 + segments[1] * 10000 + segments[2] * 100\n"
"  }\n"
"  ## takes a semantic version string, ex \"3.0.0\" and aborts if the currently running\n"
"  ## version of mosc is less than the version specified\n"
"  ##\n"
"  ## If we running Mosc Console 0.3:\n"
"  ##\n"
"  ##   Runtime.assertVersion(\"1.0\") ## aborts with error about version mismatch\n"
"  ##   Runtime.assertVersion(\"0.1\") ## ok\n"
"  ##   Runtime.assertVersion(\"0.3\") ## ok\n"
"\n"
"  dialen assertVersion(desiredMinimalVersion) {\n"
"    nii (Runtime.versionToNumber_(Runtime.VERSION) < Runtime.versionToNumber_(desiredMinimalVersion)) {\n"
"      Djuru.tike(\"mosc version ${desiredMinimalVersion} or higher required.\")\n"
"    }\n"
"  }\n"
"  dialen capabilities {\n"
"    segin niin [\n"
"      Capability.kura(\"nafamaw\"),\n"
"      Capability.kura(\"json\"),\n"
"      Capability.kura(\"ensure\"),\n"
"      Capability.kura(\"dumare\")\n"
"    ]\n"
"  }\n"
"  dialen hasCapability(c) { Runtime.capabilities.sukuSuku { (item) => item.name == c } }\n"
"  dialen details {\n"
"    segin niin {\n"
"      \"name\": Runtime.NAME,\n"
"      \"moscVersion\": Runtime.MOSC_VERSION,\n"
"      \"version\": Runtime.VERSION,\n"
"      \"capabilities\": Runtime.capabilities\n"
"    }\n"
"  }\n"
"}\n"
"\n"
"kulu Capability {\n"
"  nin _name\n"
"  nin _version\n"
"  dilan kura(n) {\n"
"    ale._name = n\n"
"    ale._version = 0\n"
"  }\n"
"  name { ale._name }\n"
"  ==(x) { x == ale._name }\n"
"  sebenma { ale._name }\n"
"}\n";
