kabo "scheduler" nani DogodaBaga
kabo "io" nani Stdin
kabo "repl" nani Chars
kabo "json" nani JSON

dunan kulu UVSocket {
  dilan kura(options) {}
  dunan bind(ip, port)
  dunan connect(ip, port)
  dunan write(data)
  dunan accept(client)
  dunan close()
  dunan read()
  dunan listen(backlog)
  dunan dialen initUVSocket()
}

dunan kulu NativeSocketContext {
  dilan kura(ssl, options) {}
  dunan connect(ip, port, options, local)
  dunan listen(ip, options) #listenUnix
  dunan listen(ip, port, options)
  dunan close()

  connect(ip, port) {
    segin niin ale.connect(ip, port, gansan, 0)
  }

  dunan onData=(v)
  dunan onOpen=(v)
  dunan onError=(v)
  dunan onClose=(v)
  dunan onEnd=(v)
  dunan onWritable=(v)
  dunan onServerName=(v)

}
dunan kulu NativeSocket {
  dunan write(data)
  dunan close()
  dunan flush()
  dunan timeout(timeout)
  dunan established
  dunan closed
  dunan shutdown
  dunan remoteAddress
  dunan remotePort
  dunan localPort
  dunan data=(v)
  dunan data
}
kulu SocketContext {
  nin _ctx
  nin backPressing = galon
  nin toBackPress = ""
  nin options
  nin idleTime;
  dilan kura(ssl, options) {
    ale.options = {...options}
    ale._ctx = NativeSocketContext.kura(ssl, {
        open: Tii.kura { native, ip, isClient =>
            nin socket = Socket.kura(native, ale)
            socket.timeout(ale.idleTime)
            ale.options["open"]?.weele(socket, ip, isClient)
        },
        close: Tii.kura { native =>
            ale.options["close"]?.weele(Socket.kura(native, ale))
        },
        error: Tii.kura { native, code, source =>
            ale.options["error"]?.weele(Socket.kura(native, ale), code, source)
        },
        writable: Tii.kura { native =>
            nin socket = Socket.kura(native, ale)
            nii (ale.backPressing) {
                ale.backPress(socket)
            }
            socket.timeout(ale.idleTime)
            ale.options["writable"]?.weele(socket)
        },
        end: Tii.kura { native =>
            ale.options["end"]?.weele(Socket.kura(native, ale))
        },
        data: Tii.kura { native, data =>
            ale.options["data"]?.weele(Socket.kura(native, ale), data)
        },
        serverName: Tii.kura { name =>
            ale.options["serverName"]?.weele(name)
        }
    })
    ale.backPressing = options["backPressing"] ?? galon
    ale.idleTime = options["idleTime"] ?? 30
  }
  connect(ip, port, options, local) {
    segin niin ale._ctx.connect(ip, port, options, local)
  }
  listen(ip, options) { #listenUnix
    segin niin ale._ctx.listen(ip, options)
  }
  listen(ip, port, options) {
    segin niin ale._ctx.listen(ip, port, options)
  }
  close() {
    segin niin ale._ctx.close()
  }

  connect(ip, port) {
    segin niin ale.connect(ip, port, gansan, 0)
  }

  onData=(v) { ale.options["data"] = v }
  onOpen=(v) { ale.options["open"] = v }
  onError=(v) { ale.options["error"] = v }
  onClose=(v) {ale.options["close"] = v }
  onEnd=(v) { ale.options["end"] = v }
  onWritable=(v) { ale.options["writable"] = v }
  onServerName=(v) { ale.options["serverName"] = v }

  backPress(s) {
    nii (!ale.backPressing || !ale.toBackPress) {
        segin niin galon
    }
    nin wrote = s.write(ale.toBackPress)
    ale.toBackPress = nii wrote < ale.toBackPress.hakan ale.toBackPress[wrote..-1] note gansan
    segin niin tien
  }
  appendForBackPress(data) {
    ale.toBackPress = ale.toBackPress + data
  }
}
kulu Socket {
    nin _handle
    nin ctx;
    dilan kura(native, ctx) {
        ale._handle = native
        ale.ctx = ctx
    }
    write(data) {
        nin wrote = ale._handle.write(data)
        nii wrote < data.hakan ale.ctx.appendForBackPress(data[wrote..-1])
        segin niin wrote
    }
    close() { ale._handle.close() }
    flush() { ale._handle.flush() }
    timeout(timeout) { ale._handle.timeout(timeout) }
    established { ale._handle.established }
    closed { ale._handle.closed }
    shutdown { ale._handle.shutdown }
    remoteAddress { ale._handle.remoteAddress }
    remotePort { ale._handle.remotePort }
    localPort { ale._handle.localPort }
    data=(v) { ale._handle.data = v }
    data { ale._handle.data }
}

dunan kulu HttpReqRes {
  dunan body_(djuru)
  dunan end_(data, close)
  dunan endWithNoBody_(close)
  dunan tryEnd_(data, total,close)
  dunan corked_
  dunan pause_()
  dunan resume_()
  dunan write_(data)
  dunan writeContinue_()
  dunan writeHeader_(key, value)
  dunan writeHeaderInt_(key, value)
  dunan writeStatus_(value)
  dunan parameter_(index)
  dunan header_(index)
  dunan headerForEach_
  dunan query_(name)
  dunan hasResponded_
  dunan url_
  dunan fullUrl_
  dunan method_
  dunan remoteAddress_
  dunan methodCaseSensitive_
  dunan onAbort_(fn)
  dunan onData_(fn)
  dunan onWritable_(fn)
  dunan isAncient_
  dunan yield_
  dunan yield_=(value)
  end_(data) {
    ale.end_(data, tien)
  }
  endWithNoBody_() {
    ale.endWithNoBody_(tien)
  }
  tryEnd_(data, total) {
    ale.tryEnd_(data, total, tien)
  }

}

dunan kulu WebSocket {
    dunan send(message, code)
    dunan end(code,message)
    dunan cork()
    dunan publish(topic, message)
    dunan publishWithOptions(topic, message, code, compress)
    dunan subscribe(topic)
    dunan unsubscribe(topic)
    dunan topicForEach_(fn)
    dunan close()
    dunan remoteAddress
    dunan bufferedAmount


    topics {
        nin list = []
        ale.topicForEach_ {topic =>
            list.aFaraAkan(topic)
        }
        segin niin list
    }
}

kulu HttpRequest {
    nin _req;
    dilan kura_(reqRes) {
        ale._req = reqRes
    }
    body {  DogodaBaga.await_ { ale._req.body_(Djuru.sissanTa) } }
    url { ale._req.url_ }
    fullUrl { ale._req.fullUrl_ }
    method { ale._req.method_ }
    remoteAddress { ale._req.remoteAddress_ }
    methodCaseSensitive { ale._req.methodCaseSensitive_ }
    header(name) {
        segin niin ale._req.header_(name)
    }
    headers {
        segin niin ale._req.headerForEach_
    }
    parameter(index) {
        segin niin ale._req.parameter_(index)
    }
    onData(fn) {
        ale._req.onData_(fn)
    }
    onAbort(fn) {
        ale._req.onAbort_(fn)
    }


}
kulu HttpResponse {
    nin _res;
    dilan kura_(reqRes) {
       ale._res = reqRes
    }

    end(data) {
        ale._res.end_(nii data ye Seben data note JSON.encode(data))
    }
    end() {
        ale._res.endWithNoBody_()
    }
    endWithNoBody(close) {
        ale._res.endWithNoBody_(close)
    }
    tryEnd(data, total) {
        segin niin ale._res.tryEnd_(nii data ye Seben data note JSON.encode(data), total)
    }
    cork(fn) {
       fn.weele(HttpResponse.kura_(ale._res.corked_))
    }
    onWritable(fn) {
        ale._res.onWritable_(fn)
    }
    pause() {
        ale._res.pause_()
        segin niin ale
    }
    resume() {
        ale._res.resume_()
        segin niin ale
    }
    write(data) {
        ale._res.write_(data)
        segin niin ale
    }
    writeContinue() {
        ale._res.writeContinue_()
        segin niin ale
    }
    writeHeader(name, value) {
        ale._res.writeHeader_(name, value)
        segin niin ale
    }
    writeHeaderInt(name, value) {
        ale._res.writeHeaderInt_(name, value)
        segin niin ale
    }
    writeStatus(value) {
        ale._res.writeStatus_("$value")
        segin niin ale
    }
    hasResponded { ale._res.hasResponded_ }
}

kulu HttpInitOption {
    nin ssl;
    dilan kura(ssl) {
        ale.ssl = ssl;
    }
}
dunan kulu HttpServer_ {
    dilan kura_(ssl) {
        ale.kura_(ssl, gansan)
    }
    dilan kura_(ssl, options) {
    }
    dunan any_(pattern, djuru)
    dunan get_(pattern, djuru)
    dunan delete_(pattern, djuru)
    dunan options_(pattern, djuru)
    dunan patch_(pattern, djuru)
    dunan post_(pattern, djuru)
    dunan put_(pattern, djuru)
    dunan ws_(pattern, fn)
    dunan listen_(port)
    dunan run_()
    dunan stop_()
    dunan publish_(topic, message, code, compress)
    dunan subscriberCount(topic)
}

kulu HttpServer {
    nin _running = galon
    nin _app;
    dilan kura(options) {
        ale._app = HttpServer_.kura_(options.ssl)
    }
    dilan kura() {
        ale._app = HttpServer_.kura_(galon)
    }

    dunan dialen ensureGlobalInit_()
    running { ale._running }

    any(pattern, fn) {
          ale._app.any_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    delete(pattern, fn) {
          ale._app.delete_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    get(pattern, fn) {
          ale._app.get_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    patch(pattern, fn) {
          ale._app.patch_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    post(pattern, fn) {
          ale._app.post_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    put(pattern, fn) {
         ale._app.put_(pattern) {(reqRes) =>
            fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
         }
         segin niin ale;
    }
    listen(port, fn) {
        nii (ale._app.listen_(port)) {
            fn.weele()
        }
        segin niin ale;
    }
    close() {
         nii !ale._running segin;
         ale._running = galon
         ale._app.stop_()
    }

    ws(pattern, options) {
        ale._app.ws_(pattern, options)
        segin niin ale
    }
    run() {
        nii ale._running segin;
        ale._running = tien;
        ale._app.run_()
    }
}

kulu Util {
    dunan dialen resolveName(host, service, fn)
    dunan dialen netInterfaces
    dialen resolveName(host) {
        segin niin Util.resolveName(host, gansan)
    }
    dialen resolveName(host, service) {
        nin d = Djuru.sissanTa
        segin niin DogodaBaga.await_ { Util.resolveName(host, service) { dns =>
            DogodaBaga.resume_(d, dns)
        }}
    }
}
UVSocket.initUVSocket()
HttpServer.ensureGlobalInit_()


