kabo "scheduler" nani DogodaBaga
kabo "io" nani Stdin
kabo "repl" nani Chars
kabo "json" nani JSON

dunan kulu HttpReqRes {
  @test(a=12, b= 3)
  @doc = ""
  @!Get(path = ["/", "/test"])
  dunan body_(djuru)
  dunan end_(data, close)
  dunan endWithNoBody_(close)
  dunan tryEnd_(data, total,close)
  dunan corked_
  dunan pause_()
  dunan resume_()
  dunan write_(data)
  dunan writeContinue_()
  dunan writeHeader_(key, value)
  dunan writeHeaderInt_(key, value)
  dunan writeStatus_(value)
  dunan parameter_(index)
  dunan header_(index)
  dunan headerForEach_
  dunan query_(name)
  dunan hasResponded_
  dunan url_
  dunan fullUrl_
  dunan method_
  dunan remoteAddress_
  dunan methodCaseSensitive_
  dunan onAbort_(fn)
  dunan onData_(fn)
  dunan onWritable_(fn)
  dunan isAncient_
  dunan yield_
  dunan yield_=(value)
  end_(data) {
    ale.end_(data, tien)
  }
  endWithNoBody_() {
    ale.endWithNoBody_(tien)
  }
  tryEnd_(data, total) {
    ale.tryEnd_(data, total, tien)
  }

}

dunan kulu WebSocket {
    dunan send(message, code)
    dunan end(code,message)
    dunan cork()
    dunan publish(topic, message)
    dunan publishWithOptions(topic, message, code, compress)
    dunan subscribe(topic)
    dunan unsubscribe(topic)
    dunan topicForEach_(fn)
    dunan close()
    dunan remoteAddress
    dunan bufferedAmount


    topics {
        nin list = []
        ale.topicForEach_ {topic =>
            list.aFaraAkan(topic)
        }
        segin niin list
    }
}

kulu HttpRequest {
    nin _req;
    dilan kura_(reqRes) {
        ale._req = reqRes
    }
    body {  DogodaBaga.await_ { ale._req.body_(Djuru.sissanTa) } }
    url { ale._req.url_ }
    fullUrl { ale._req.fullUrl_ }
    method { ale._req.method_ }
    remoteAddress { ale._req.remoteAddress_ }
    methodCaseSensitive { ale._req.methodCaseSensitive_ }
    header(name) {
        segin niin ale._req.header_(name)
    }
    headers {
        segin niin ale._req.headerForEach_
    }
    parameter(index) {
        segin niin ale._req.parameter_(index)
    }
    onData(fn) {
        ale._req.onData_(fn)
    }
    onAbort(fn) {
        ale._req.onAbort_(fn)
    }


}
kulu HttpResponse {
    nin _res;
    dilan kura_(reqRes) {
       ale._res = reqRes
    }

    end(data) {
        ale._res.end_(nii data ye Seben data note JSON.encode(data))
    }
    end() {
        ale._res.endWithNoBody_()
    }
    endWithNoBody(close) {
        ale._res.endWithNoBody_(close)
    }
    tryEnd(data, total) {
        segin niin ale._res.tryEnd_(nii data ye Seben data note JSON.encode(data), total)
    }
    cork(fn) {
       fn.weele(HttpResponse.kura_(ale._res.corked_))
    }
    onWritable(fn) {
        ale._res.onWritable_(fn)
    }
    pause() {
        ale._res.pause_()
        segin niin ale
    }
    resume() {
        ale._res.resume_()
        segin niin ale
    }
    write(data) {
        ale._res.write_(data)
        segin niin ale
    }
    writeContinue() {
        ale._res.writeContinue_()
        segin niin ale
    }
    writeHeader(name, value) {
        ale._res.writeHeader_(name, value)
        segin niin ale
    }
    writeHeaderInt(name, value) {
        ale._res.writeHeaderInt_(name, value)
        segin niin ale
    }
    writeStatus(value) {
        ale._res.writeStatus_("$value")
        segin niin ale
    }
    hasResponded { ale._res.hasResponded_ }
}

kulu HttpInitOption {
    nin ssl;
    dilan kura(ssl) {
        ale.ssl = ssl;
    }
}
dunan kulu HttpServer_ {
    dilan kura_(ssl) {
    }
    dunan any_(pattern, djuru)
    dunan get_(pattern, djuru)
    dunan delete_(pattern, djuru)
    dunan options_(pattern, djuru)
    dunan patch_(pattern, djuru)
    dunan post_(pattern, djuru)
    dunan put_(pattern, djuru)
    dunan ws_(pattern, fn)
    dunan listen_(port)
    dunan run_()
    dunan stop_()
    dunan publish_(topic, message, code, compress)
    dunan subscriberCount(topic)
}
p
kulu HttpServer {
    nin _running = galon
    nin _app;
    dilan kura(options) {
        ale._app = HttpServer_.kura_(options.ssl)
    }
    dilan kura() {
        ale._app = HttpServer_.kura_(galon)
    }

    dunan dialen ensureGlobalInit_()
    running { ale._running }

    any(pattern, fn) {
          ale._app.any_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    delete(pattern, fn) {
          ale._app.delete_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    get(pattern, fn) {
          ale._app.get_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    patch(pattern, fn) {
          ale._app.patch_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    post(pattern, fn) {
          ale._app.post_(pattern) {(reqRes) =>
             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
          }
         segin niin ale;
    }
    put(pattern, fn) {
         ale._app.put_(pattern) {(reqRes) =>
            fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))
         }
         segin niin ale;
    }
    listen(port, fn) {
        nii (ale._app.listen_(port)) {
            fn.weele()
        }
        segin niin ale;
    }
    close() {
         nii !ale._running segin;
         ale._running = galon
         ale._app.stop_()
    }

    ws(pattern, options) {
        ale._app.ws_(pattern, options)
        segin niin ale
    }
    run() {
        nii ale._running segin;
        ale._running = tien;
        ale._app.run_()
    }
}

HttpServer.ensureGlobalInit_()


