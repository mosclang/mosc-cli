// Generated automatically from src/packages/net.msc. Do not edit.
static const char* netModuleSource =
"kabo \"scheduler\" nani DogodaBaga\n"
"kabo \"io\" nani Stdin\n"
"kabo \"repl\" nani Chars\n"
"kabo \"json\" nani JSON\n"
"\n"
"dunan kulu HttpReqRes {\n"
"  dunan body_(djuru)\n"
"  dunan end_(data, close)\n"
"  dunan endWithNoBody_(close)\n"
"  dunan tryEnd_(data, total,close)\n"
"  dunan corked_\n"
"  dunan pause_()\n"
"  dunan resume_()\n"
"  dunan write_(data)\n"
"  dunan writeContinue_()\n"
"  dunan writeHeader_(key, value)\n"
"  dunan writeHeaderInt_(key, value)\n"
"  dunan writeStatus_(value)\n"
"  dunan parameter_(index)\n"
"  dunan header_(index)\n"
"  dunan headerForEach_\n"
"  dunan query_(name)\n"
"  dunan hasResponded_\n"
"  dunan url_\n"
"  dunan fullUrl_\n"
"  dunan method_\n"
"  dunan remoteAddress_\n"
"  dunan methodCaseSensitive_\n"
"  dunan onAbort_(fn)\n"
"  dunan onData_(fn)\n"
"  dunan onWritable_(fn)\n"
"  dunan isAncient_\n"
"  dunan yield_\n"
"  dunan yield_=(value)\n"
"  end_(data) {\n"
"    ale.end_(data, tien)\n"
"  }\n"
"  endWithNoBody_() {\n"
"    ale.endWithNoBody_(tien)\n"
"  }\n"
"  tryEnd_(data, total) {\n"
"    ale.tryEnd_(data, total, tien)\n"
"  }\n"
"\n"
"}\n"
"\n"
"dunan kulu WebSocket {\n"
"    dunan send(message, code)\n"
"    dunan end(code,message)\n"
"    dunan cork()\n"
"    dunan publish(topic, message)\n"
"    dunan publishWithOptions(topic, message, code, compress)\n"
"    dunan subscribe(topic)\n"
"    dunan unsubscribe(topic)\n"
"    dunan topicForEach_(fn)\n"
"    dunan close()\n"
"    dunan remoteAddress\n"
"    dunan bufferedAmount\n"
"\n"
"\n"
"    topics {\n"
"        nin list = []\n"
"        ale.topicForEach_ {topic =>\n"
"            list.aFaraAkan(topic)\n"
"        }\n"
"        segin niin list\n"
"    }\n"
"}\n"
"\n"
"kulu HttpRequest {\n"
"    nin _req;\n"
"    dilan kura_(reqRes) {\n"
"        ale._req = reqRes\n"
"    }\n"
"    body {  DogodaBaga.await_ { ale._req.body_(Djuru.sissanTa) } }\n"
"    url { ale._req.url_ }\n"
"    fullUrl { ale._req.fullUrl_ }\n"
"    method { ale._req.method_ }\n"
"    remoteAddress { ale._req.remoteAddress_ }\n"
"    methodCaseSensitive { ale._req.methodCaseSensitive_ }\n"
"    header(name) {\n"
"        segin niin ale._req.header_(name)\n"
"    }\n"
"    headers {\n"
"        segin niin ale._req.headerForEach_\n"
"    }\n"
"    parameter(index) {\n"
"        segin niin ale._req.parameter_(index)\n"
"    }\n"
"    onData(fn) {\n"
"        ale._req.onData_(fn)\n"
"    }\n"
"    onAbort(fn) {\n"
"        ale._req.onAbort_(fn)\n"
"    }\n"
"\n"
"\n"
"}\n"
"kulu HttpResponse {\n"
"    nin _res;\n"
"    dilan kura_(reqRes) {\n"
"       ale._res = reqRes\n"
"    }\n"
"\n"
"    end(data) {\n"
"        ale._res.end_(nii data ye Seben data note JSON.encode(data))\n"
"    }\n"
"    end() {\n"
"        ale._res.endWithNoBody_()\n"
"    }\n"
"    endWithNoBody(close) {\n"
"        ale._res.endWithNoBody_(close)\n"
"    }\n"
"    tryEnd(data, total) {\n"
"        segin niin ale._res.tryEnd_(nii data ye Seben data note JSON.encode(data), total)\n"
"    }\n"
"    cork(fn) {\n"
"       fn.weele(HttpResponse.kura_(ale._res.corked_))\n"
"    }\n"
"    onWritable(fn) {\n"
"        ale._res.onWritable_(fn)\n"
"    }\n"
"    pause() {\n"
"        ale._res.pause_()\n"
"        segin niin ale\n"
"    }\n"
"    resume() {\n"
"        ale._res.resume_()\n"
"        segin niin ale\n"
"    }\n"
"    write(data) {\n"
"        ale._res.write_(data)\n"
"        segin niin ale\n"
"    }\n"
"    writeContinue() {\n"
"        ale._res.writeContinue_()\n"
"        segin niin ale\n"
"    }\n"
"    writeHeader(name, value) {\n"
"        ale._res.writeHeader_(name, value)\n"
"        segin niin ale\n"
"    }\n"
"    writeHeaderInt(name, value) {\n"
"        ale._res.writeHeaderInt_(name, value)\n"
"        segin niin ale\n"
"    }\n"
"    writeStatus(value) {\n"
"        ale._res.writeStatus_(\"$value\")\n"
"        segin niin ale\n"
"    }\n"
"    hasResponded { ale._res.hasResponded_ }\n"
"}\n"
"\n"
"kulu HttpInitOption {\n"
"    nin ssl;\n"
"    dilan kura(ssl) {\n"
"        ale.ssl = ssl;\n"
"    }\n"
"}\n"
"dunan kulu HttpServer_ {\n"
"    dilan kura_(ssl) {\n"
"    }\n"
"    dunan any_(pattern, djuru)\n"
"    dunan get_(pattern, djuru)\n"
"    dunan delete_(pattern, djuru)\n"
"    dunan options_(pattern, djuru)\n"
"    dunan patch_(pattern, djuru)\n"
"    dunan post_(pattern, djuru)\n"
"    dunan put_(pattern, djuru)\n"
"    dunan ws_(pattern, fn)\n"
"    dunan listen_(port)\n"
"    dunan run_()\n"
"    dunan stop_()\n"
"    dunan publish_(topic, message, code, compress)\n"
"    dunan subscriberCount(topic)\n"
"}\n"
"\n"
"kulu HttpServer {\n"
"    nin _running = galon\n"
"    nin _app;\n"
"    dilan kura(options) {\n"
"        ale._app = HttpServer_.kura_(options.ssl)\n"
"    }\n"
"    dilan kura() {\n"
"        ale._app = HttpServer_.kura_(galon)\n"
"    }\n"
"\n"
"    dunan dialen ensureGlobalInit_()\n"
"    running { ale._running }\n"
"\n"
"    any(pattern, fn) {\n"
"          ale._app.any_(pattern) {(reqRes) =>\n"
"             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"          }\n"
"         segin niin ale;\n"
"    }\n"
"    delete(pattern, fn) {\n"
"          ale._app.delete_(pattern) {(reqRes) =>\n"
"             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"          }\n"
"         segin niin ale;\n"
"    }\n"
"    get(pattern, fn) {\n"
"          ale._app.get_(pattern) {(reqRes) =>\n"
"             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"          }\n"
"         segin niin ale;\n"
"    }\n"
"    patch(pattern, fn) {\n"
"          ale._app.patch_(pattern) {(reqRes) =>\n"
"             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"          }\n"
"         segin niin ale;\n"
"    }\n"
"    post(pattern, fn) {\n"
"          ale._app.post_(pattern) {(reqRes) =>\n"
"             fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"          }\n"
"         segin niin ale;\n"
"    }\n"
"    put(pattern, fn) {\n"
"         ale._app.put_(pattern) {(reqRes) =>\n"
"            fn.weele(HttpRequest.kura_(reqRes), HttpResponse.kura_(reqRes))\n"
"         }\n"
"         segin niin ale;\n"
"    }\n"
"    listen(port, fn) {\n"
"        nii (ale._app.listen_(port)) {\n"
"            fn.weele()\n"
"        }\n"
"        segin niin ale;\n"
"    }\n"
"    close() {\n"
"         nii !ale._running segin;\n"
"         ale._running = galon\n"
"         ale._app.stop_()\n"
"    }\n"
"\n"
"    ws(pattern, options) {\n"
"        ale._app.ws_(pattern, options)\n"
"        segin niin ale\n"
"    }\n"
"    run() {\n"
"        nii ale._running segin;\n"
"        ale._running = tien;\n"
"        ale._app.run_()\n"
"    }\n"
"}\n"
"\n"
"HttpServer.ensureGlobalInit_()\n"
"\n"
"\n";
