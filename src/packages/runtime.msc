
kulu Runtime {
  dialen NAME { "mosc" }
  dialen MOSC_VERSION { "0.8.2" }
  dialen VERSION { "0.4.2" }
  ## allows simple numeric comparison of semantic version strings
  ## by turning them into large integers
  dialen versionToNumber_(v) {
    nin segments = v.faraFara(".").yelema { (x) => Diat.kaboSebenna(x) }.walanNa
    segin niin segments[0] * 1000000 + segments[1] * 10000 + segments[2] * 100
  }
  ## takes a semantic version string, ex "3.0.0" and aborts if the currently running
  ## version of mosc is less than the version specified
  ##
  ## If we running Mosc Console 0.3:
  ##
  ##   Runtime.assertVersion("1.0") ## aborts with error about version mismatch
  ##   Runtime.assertVersion("0.1") ## ok
  ##   Runtime.assertVersion("0.3") ## ok

  dialen assertVersion(desiredMinimalVersion) {
    nii (Runtime.versionToNumber_(Runtime.VERSION) < Runtime.versionToNumber_(desiredMinimalVersion)) {
      Djuru.tike("mosc version ${desiredMinimalVersion} or higher required.")
    }
  }
  dialen capabilities {
    segin niin [
      Capability.kura("nafamaw"),
      Capability.kura("json"),
      Capability.kura("ensure"),
      Capability.kura("dumare")
    ]
  }
  dialen hasCapability(c) { Runtime.capabilities.sukuSuku { (item) => item.name == c } }
  dialen details {
    segin niin {
      "name": Runtime.NAME,
      "moscVersion": Runtime.MOSC_VERSION,
      "version": Runtime.VERSION,
      "capabilities": Runtime.capabilities
    }
  }
}

kulu Capability {
  nin _name
  nin _version
  dilan kura(n) {
    ale._name = n
    ale._version = 0
  }
  name { ale._name }
  ==(x) { x == ale._name }
  sebenma { ale._name }
}
