// Generated automatically from src/packages/os.msc. Do not edit.
static const char* osModuleSource =
"kabo \"scheduler\" nani DogodaBaga\n"
"kabo \"ensure\" nani Ensure\n"
"\n"
"kulu Platform {\n"
"  dunan dialen homePath\n"
"  dunan dialen isPosix\n"
"  dunan dialen name\n"
"\n"
"  dialen isWindows { Platform.name == \"Windows\" }\n"
"}\n"
"\n"
"kulu Process {\n"
"  # TODO: This will need to be smarter when mosc supports CLI options.\n"
"  dialen arguments { nii(Process.allArguments.hakan >= 2) Process.allArguments[2..-1] note [] }\n"
"  dialen exit() { Process.exit(0) }\n"
"  dialen exit(code) {\n"
"    ## sets the exit code on the C side and stops the UV loop\n"
"    Process.exit_(code)\n"
"    ## suspends our Djuru and with UV loop stopped, no futher Djurus should get\n"
"    ## resumed so we should immediately stop and exit\n"
"    Djuru.djo()\n"
"  }\n"
"\n"
"  dialen exec(cmd) {\n"
"    segin niin Process.exec(cmd, gansan, gansan, gansan)\n"
"  }\n"
"\n"
"  dialen exec(cmd, args) {\n"
"    segin niin Process.exec(cmd, args, gansan, gansan)\n"
"  }\n"
"\n"
"  dialen exec(cmd, args, cwd) {\n"
"    segin niin Process.exec(cmd, args, cwd, gansan)\n"
"  }\n"
"\n"
"  dialen exec(cmd, args, cwd, envMap) {\n"
"    nin env = []\n"
"    args = args || []\n"
"    nii (envMap ye Wala) {\n"
"      seginka (envMap kono entry) {\n"
"        env.aFaraAkan([entry.key, entry.value].kunBen(\"=\"))\n"
"      }\n"
"    } note nii (envMap == gansan) {\n"
"      env = gansan\n"
"    } note {\n"
"      Djuru.tike(\"environment vars must be passed as a Wala\")\n"
"    }\n"
"    segin niin DogodaBaga.await_ { Process.exec_(cmd, args, cwd, env, Djuru.sissanTa) }\n"
"  }\n"
"\n"
"  dialen chdir(dir) {\n"
"    Ensure.sebenDo(dir, \"directory\")\n"
"    Process.chdir_(dir)\n"
"  }\n"
"\n"
"  dunan dialen exec_(cmd, args, cwd, env, fiber)\n"
"  dunan dialen allArguments\n"
"  dunan dialen cwd\n"
"  dunan dialen chdir_(dir)\n"
"  dunan dialen pid\n"
"  dunan dialen ppid\n"
"  dunan dialen version\n"
"  dunan dialen exit_(code)\n"
"}\n";
